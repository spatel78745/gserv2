Problem 1: Code organization between ClientSocket, ServerSocket
 Currently, there are two ways to make a ClientSocket:
  1. Using host, port:
   - cliSock = ClientSocket('host', 1234)
   
  2. Using an existing connection:
   - Isn't this a 'copy constructor'?
   - cliSock = ClientSocket()
     cliSock.setSocket(connection)

 Another POV: ClientSocket is a 'decorator' for connections. So maybe the
 solution is to build ClientSocket on top of Connection. Then ClientSocket
 inherits from Connection. Let's give this a whirl.
 
 But what is a connection?
 - Something that's returned by 'accept' or 'connect'
 - But whatever it is, it's the same thing
 - I think this means:
  - That the connect call belongs in ClientSocket
  - And only the I/O calls should remain in the Connection class
  
So what's it look like in skeletal form?
  class Connection:
    def __init__(self, connection)
    def close()
    def read(self)
    def readline(self, keepEndl)
    def write(self, data)
    def writeline(self, data)
    
And ClientSocket inherits from Connection:
class ClientSocket(Connection):
    def __init__(self, host, port)
        self.conn = None
    def connect(self):
        self.conn = Connection(self.sock.connect(...))
        
Some nice-to-have TODOs:
- Use create_connection in connect() using 'with'
- Do a critical review at some point

Problem 2: Test ServerSocket
- Use create_connection to connect to the socket. But then what is the point
  of ClientSocket? Well, convert it and then take a look...well, not really
  necessary.
- Divide the ClientSocket tests into Connection and ClientSocket tests...well,
again, not really necessary.
- Here's the test:
- Create a server socket and accept a connection
- Ask the user to connect to the socket
- Ask the user to send '123' 
- Send 'abc' and ask the user to verify that she sees it
